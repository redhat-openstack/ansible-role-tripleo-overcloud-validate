#!/bin/bash
# Validate the overcloud deployment
set -eux

function cleanup() {
# clean env
{% if release in ['kilo','rhos-7'] %}
    heat stack-delete {{ validate_stack_name }}
{% else  %}
     heat stack-delete -y {{ validate_stack_name }}
{% endif %}
    if [[ $(tripleo wait_for -w 300 -d 30 -s "Stack not found" -- "heat stack-show {{ validate_stack_name }}") ]]; then
        echo "Heat stack delete"
    else
        if [[ $(heat stack-list | grep {{ validate_stack_name }} | grep -i failed) ]]; then
        {% if release in ['kilo','rhos-7'] %}
            heat stack-delete {{ validate_stack_name }}
        {% else  %}
             heat stack-delete -y {{ validate_stack_name }}
        {% endif %}
        fi
    fi
}
# trap on exit
trap cleanup EXIT
# source tenantrc file
source {{ working_dir }}/{{ tenantrc }}
# get validate image
wget {{ validate_image_url }}
# remove existing image
for image in $(glance image-list | grep {{ validate_image_name }} | awk '{ print $2; }'); do
   glance image-delete $image
done
glance image-create --name="{{ validate_image_name }}" --disk-format=qcow2 \
  --container-format=bare < cirros-0.3.4-x86_64-disk.img
# clean up network if it exists from previous run
neutron net-delete {{ overcloud_public_network_name }} > /dev/null 2>&1 || true
# create external network
# Liberty compat :
#( note: heat can't create an external network in liberty)
neutron net-create {{ overcloud_public_network_name }} --router:external=True \
    --provider:network_type {{ public_network_type }} \
    --provider:physical_network {{ public_physical_network }} \
{% if public_segmentation_id != '' %}
    --provider:segmentation_id {{ public_segmentation_id }}
{% endif %}


neutron subnet-create --name ext-subnet \
    --allocation-pool \
    start={{ public_net_pool_start }},end={{ public_net_pool_end }} \
    --disable-dhcp \
    --gateway {{ public_net_gateway }} \
    {{ overcloud_public_network_name }} {{ floating_ip_cidr }}

# create test ping stack
heat stack-create {{ validate_stack_name }} --template-file  tenantvm_floatingip.yaml
# wait for stack complete or failed
/bin/bash /usr/libexec/openstack-tripleo/wait_for -w 600 --delay 30 \
  --success-match {{ validate_success_status }} -- heat stack-show {{ validate_stack_name }}

# get the floating ip
novaid=`nova list|grep {{ validate_server_name }} |awk  '{print $2}'`
floating_ip=`nova floating-ip-list | grep $novaid | awk  '{print $4}'`
ping -c 1 $floating_ip

nova show {{ validate_server_name }} || :
nova service-list || :
neutron agent-list || :
nova console-log {{ validate_server_name }}




