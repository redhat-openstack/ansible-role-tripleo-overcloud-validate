heat_template_version: 2013-05-23

description: >
  HOT template to create a new neutron network plus a router to the public
  network, and for deploying a server into the new network. The template also
  assigns a floating IP address and sets security group rules. ADAPTED FROM
  https://raw.githubusercontent.com/openstack/heat-templates/master/hot/servers_in_new_neutron_net.yaml
parameters:
  key_name:
    type: string
    description: Name of keypair to assign to servers
    default: '{{ validate_key_name }}'
  image:
    type: string
    description: Name of image to use for servers
    default: '{{ validate_image_name }}'
  public_net_name:
    type: string
    default: '{{ overcloud_public_network_name }}'
    description: >
      ID or name of public network for which floating IP addresses will be allocated
{% if release not in ['kilo','liberty','rhos-7','rhos-8'] %}
  public_network_type:
    type: string
    description: Public network type
    default: '{{ public_network_type }}'
  public_physical_network:
    type: string
    description: Public  physical network
    default: '{{ public_physical_network }}'
  public_router_external:
    type: string
    description: Public external router
    default: '{{ public_router_external }}'
  public_segmentation_id:
    type: string
    description: Public segmentation id
    default: '{{ public_segmentation_id }}'
  public_net_cidr:
    type: string
    description: Public network address (CIDR notation)
    default: '{{ floating_ip_cidr }}'
  public_net_gateway:
    type: string
    description: Public network gateway address
    default: '{{ public_net_gateway }}'
  public_net_pool_start:
    type: string
    description: Start of public network IP address allocation pool
    default: '{{ public_net_pool_start }}'
  public_net_pool_end:
    type: string
    default: '{{ public_net_pool_end }}'
    description: End of public network IP address allocation pool
{% endif %}
  private_net_name:
    type: string
    description: Name of private network to be created
    default: 'default-net'
  private_net_cidr:
    type: string
    description: Private network address (CIDR notation)
    default: '192.168.2.0/24'
  private_net_gateway:
    type: string
    description: Private network gateway address
    default: '192.168.2.1'
  private_net_pool_start:
    type: string
    description: Start of private network IP address allocation pool
    default: '192.168.2.100'
  private_net_pool_end:
    type: string
    default: '192.168.2.200'
    description: End of private network IP address allocation pool
{% if release in ['kilo','rhos-7'] %}
  test_flavor:
    type: string
    default: '{{ validate_flavor_id }}'
    description: Flavor of the nova instance
{% endif %}

resources:
  key:
    type: OS::Nova::KeyPair
    properties:
      save_private_key: true
      name: {get_param: key_name }

{% if release not in ['kilo','liberty','rhos-7','rhos-8'] %}
  public_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: public_net_name }
      network_type: { get_param: public_network_type }
      physical_network: { get_param: public_physical_network }
      router_external: { get_param: public_router_external }
{% if public_network_type != 'flat' %}
      segmentation_id: { get_param: public_segmentation_id }
{% endif %}

  public_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: public_net }
      cidr: { get_param: public_net_cidr }
      gateway_ip: { get_param: public_net_gateway }
      allocation_pools:
        - start: { get_param: public_net_pool_start }
          end: { get_param: public_net_pool_end }
      enable_dhcp: false
{% endif %}

  private_net:
    type: OS::Neutron::Net
    properties:
      name: { get_param: private_net_name }

  private_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: private_net }
      cidr: { get_param: private_net_cidr }
      gateway_ip: { get_param: private_net_gateway }
      allocation_pools:
        - start: { get_param: private_net_pool_start }
          end: { get_param: private_net_pool_end }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net_name }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: private_subnet }

  volume1:
    type: OS::Cinder::Volume
    properties:
      name: Volume1
      image: { get_param: image }
      size: 1

  server1:
    type: OS::Nova::Server
    depends_on: volume1
    properties:
      name: Server1
      block_device_mapping:
        - device_name: vda
          volume_id: { get_resource: volume1 }
{% if release in ['kilo','rhos-7'] %}
      flavor: { get_param: test_flavor }
{% else  %}
      flavor: { get_resource: test_flavor }
{% endif %}
      key_name: { get_resource: key }
      networks:
        - port: { get_resource: server1_port }

  server1_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_resource: private_net }
      fixed_ips:
        - subnet_id: { get_resource: private_subnet }
      security_groups: [{ get_resource: server_security_group }]

  server1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: public_net_name }
      port_id: { get_resource: server1_port }

  server_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      description: Add security group rules for server
      name: pingtest-security-group
      rules:
        - remote_ip_prefix: 0.0.0.0/0
          protocol: tcp
          port_range_min: 22
          port_range_max: 22
        - remote_ip_prefix: 0.0.0.0/0
          protocol: icmp

{% if release not in ['kilo','rhos-7'] %}
  test_flavor:
    type: OS::Nova::Flavor
    properties:
      ram: 512
      vcpus: 1
{% endif %}

outputs:
  server1_private_ip:
    description: IP address of server1 in private network
    value: { get_attr: [ server1, first_address ] }
  server1_public_ip:
    description: Floating IP address of server1 in public network
    value: { get_attr: [ server1_floating_ip, floating_ip_address ] }
